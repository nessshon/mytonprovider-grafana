{
  "__inputs": [
    {
      "name": "DS_POSTGRES",
      "label": "Postgres",
      "description": "",
      "type": "datasource",
      "pluginId": "grafana-postgresql-datasource",
      "pluginName": "PostgreSQL"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.1.1"
    },
    {
      "type": "datasource",
      "id": "grafana-postgresql-datasource",
      "name": "PostgreSQL",
      "version": "12.1.1"
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "postgres_ds"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.1",
      "repeat": "pubkeys",
      "repeatDirection": "v",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "postgres_ds"
          },
          "format": "time_series",
          "rawSql": "\nWITH sel AS (\n  SELECT CASE WHEN '${load}'='load1' THEN 1 WHEN '${load}'='load5' THEN 2 ELSE 3 END AS idx\n),\n hist AS (\n  SELECT th.archived_at AS time,\n         (th.cpu_load)[(SELECT idx FROM sel)] AS value\n  FROM providers.telemetry_history th\n  WHERE th.public_key = ${pubkeys:singlequote} AND $__timeFilter(th.archived_at)\n),\n curr AS (\n  SELECT t.updated_at AS time,\n         (t.cpu_load)[(SELECT idx FROM sel)] AS value\n  FROM providers.telemetry t\n  WHERE t.public_key = ${pubkeys:singlequote} AND $__timeFilter(t.updated_at)\n)\nSELECT time, value FROM hist\nUNION ALL\nSELECT time, value FROM curr\nORDER BY time;\n",
          "refId": "A"
        }
      ],
      "title": "${pubkeys}",
      "transparent": true,
      "type": "timeseries"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 41,
  "tags": [
    "cpu"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "text": "",
          "value": ""
        },
        "label": "Provider",
        "name": "q_pubkey",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "type": "textbox"
      },
      {
        "current": {
          "text": "load1",
          "value": "load1"
        },
        "label": "CPU load",
        "name": "load",
        "options": [
          {
            "selected": true,
            "text": "load1",
            "value": "load1"
          },
          {
            "selected": false,
            "text": "load5",
            "value": "load5"
          },
          {
            "selected": false,
            "text": "load15",
            "value": "load15"
          }
        ],
        "query": "load1,load5,load15",
        "type": "custom"
      },
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "postgres_ds"
        },
        "definition": "SELECT public_key AS __text, public_key AS __value FROM providers.providers WHERE (${q_pubkey:sqlstring} = '' OR public_key ILIKE ${q_pubkey:sqlstring}) ORDER BY COALESCE(rating,0) DESC, public_key;",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "pubkeys",
        "options": [],
        "query": "SELECT public_key AS __text, public_key AS __value FROM providers.providers WHERE (${q_pubkey:sqlstring} = '' OR public_key ILIKE ${q_pubkey:sqlstring}) ORDER BY COALESCE(rating,0) DESC, public_key;",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h"
    ]
  },
  "timezone": "",
  "title": "CPU Load Averages",
  "uid": "cpu-per-provider",
  "version": 1,
  "weekStart": ""
}